<?php

/**
 * @file
 * Quanthub Core module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Url;
use Drupal\quanthub_core\Form\PowerBIMediaForm;

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function quanthub_core_node_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($operation == 'view') {
    if ($entity->bundle() == 'dataset') {
      if (getenv('WSO_IGNORE') !== 'TRUE') {
        $allowed_datasets = \Drupal::service('allowed_content_manager')
          ->getAllowedDatasetList();
      }
      if (!empty($allowed_datasets)) {
        $node_dataset = $entity->field_quanthub_urn->getString();
        // @todo We are not checking quanthub dataset version here.
        foreach ($allowed_datasets as $allowed_dataset) {
          if (strpos($node_dataset, $allowed_dataset) !== FALSE) {
            return AccessResult::allowed();
          }
        }
        return AccessResult::forbidden();
      }
    }
    if ($entity->bundle() == 'publication') {
      // @todo rewrite in db_select.
      $node_dataset = $entity?->get('field_dataset')?->first()?->get('entity')?->getTarget()?->getValue()?->get('field_quanthub_urn')?->getString();
      if (getenv('WSO_IGNORE') !== 'TRUE') {
        $allowed_datasets = \Drupal::service('allowed_content_manager')
          ->getAllowedDatasetList();
      }
      if (!empty($allowed_datasets)) {
        // @todo We are not checking quanthub dataset version here.
        foreach ($allowed_datasets as $allowed_dataset) {
          if (strpos($node_dataset, $allowed_dataset) !== FALSE) {
            return AccessResult::allowed();
          }
        }
        return AccessResult::forbidden();
      }
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function quanthub_core_views_data_alter(array &$data) {
  $data['node__field_quanthub_urn']['allowed_content_filter'] = [
    'title' => t('Allowed Content Filter'),
    'filter' => [
      'title' => t('Allowed Content Filter'),
      'help' => t('Content Filter By Dataset Urn'),
      'group' => t('Quanthub'),
      'field' => 'field_quanthub_urn',
      'id' => 'allowed_content_filter',
    ],
  ];
}

/**
 * Implements hook_preprocess_page().
 */
function quanthub_core_preprocess_page(&$variables) {
  // Add module-specific JS customizations.
  $variables['#attached']['library'][] = 'quanthub_core/qh_core-power-bi-customizer';
}

/**
 * Implements hook_theme().
 */
function quanthub_core_theme() {
  return [
    'powerbi_embed_formatter' => [
      'variables' => [
        'embed_id' => NULL,
        'embed_type' => NULL,
        'field_name' => NULL,
        'report_id' => NULL,
        'report_width' => NULL,
        'report_height' => NULL,
        'report_title' => NULL,
        'report_page' => NULL,
        'report_visual' => NULL,
        'extra_datasets' => NULL,
        'token_expiration' => NULL,
        'workspace_id' => NULL,
        'token' => NULL,
        'embed_url' => NULL,
      ],
      'template' => 'powerbi-embed-formatter',
    ],
    'block__browse_data_menu' => [
      'variables' => [
        'links' => NULL,
        ]
      ],
  ];
}

/**
 * Implements hook_cron().
 */
function quanthub_core_cron() {
  Drupal::logger('powerbi_embed')->info("cron: invalidate tags");
  $tags = ['powerbi_embed:token'];
  Cache::invalidateTags($tags);
}

/**
 * Alter the form powerbi_embed_settings.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param string $form_id
 *   The form ID.
 */
function quanthub_core_form_powerbi_embed_settings_alter(array &$form, FormStateInterface $form_state, string $form_id) {
  $config = Drupal::configFactory()->get('powerbi_embed.settings');
  $module_handler = Drupal::moduleHandler();

  // @todo Need to find better way to alter contrib form.
  $form['auth_method']['#disabled'] = TRUE;
  $form['adal']['#disabled'] = TRUE;
  $form['msal']['#disabled'] = TRUE;

  $form['client_id'] = [
    '#type' => 'textfield',
    '#title' => t('Azure Client ID'),
    '#description' => t('Azure Client ID'),
    '#default_value' => empty($config->get('client_id')) ? '' : $config->get('client_id'),
  ];

  $form['username'] = [
    '#type' => 'textfield',
    '#title' => t('Service Principal Username'),
    '#description' => t('Service Principal Username'),
    '#default_value' => empty($config->get('username')) ? '' : $config->get('username'),
  ];

  $form['password'] = [
    '#type' => 'password',
    '#title' => t('Service Principal Password'),
    '#description' => t('Service Principal Password'),
    '#default_value' => empty($config->get('password')) ? '' : $config->get('password'),
  ];
  if ($module_handler->moduleExists('key')) {
    $form['password']['#type'] = 'key_select';
  }

  $form['actions']['submit']['#submit'][] = 'quanthub_core_form_powerbi_embed_settings_submit';
}

/**
 * Alter Submit for quanthub_core_form_powerbi_embed_settings_alter form .
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function quanthub_core_form_powerbi_embed_settings_submit(array $form, FormStateInterface $form_state) {
  $config = Drupal::configFactory()->getEditable('powerbi_embed.settings');

  $config->set('workspace_id', $form_state->getValue('workspace_id'));
  $config->set('client_id', $form_state->getValue('client_id'));
  $config->set('username', $form_state->getValue('username'));
  if (!empty($form_state->getValue('password'))) {
    $config->set('password', $form_state->getValue('password'));
  }

  $config->save();
}

/**
 * Implements hook_media_source_info_alter().
 */
function quanthub_core_media_source_info_alter(array &$sources) {
  if (empty($sources['power_bi']['forms']['media_library_add'])) {
    $sources['power_bi']['forms']['media_library_add'] = PowerBIMediaForm::class;
  }
}

/**
 * Implements hook_preprocess_HOOK() for Power BI media template.
 */
function quanthub_core_preprocess_media__power_bi(array &$variables) {
  $route = \Drupal::routeMatch()->getRouteName();
  if ($route == 'media.filter.preview') {
    $variables['preview'] = TRUE;
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 *
 * Fix the limit HTML problem for colorbutton module, until the issue is solved.
 *
 * @see https://www.drupal.org/project/colorbutton/issues/2910028
 */
function quanthub_core_editor_js_settings_alter(array &$settings) {
  // Settings for CKEditor Color Button plugin.
  $extra_editor_settings = [
    'colorButton_foreStyle' => [
      'element' => 'span',
      'attributes' => ['class' => '#(colorName)'],
      'overrides' => [
        ['element' => 'span', 'attributes' => ['class' => NULL]],
      ],
    ],
    'colorButton_backStyle' => [
      'element' => 'span',
      'attributes' => ['class' => '#(colorName)-bg'],
      'overrides' => [
        ['element' => 'span', 'attributes' => ['class' => NULL]],
      ],
    ],
    'colorButton_colors' => 'ck-black/000000,ck-gray/666666',
  ];

  $settings['editor']['formats']['basic_html']['editorSettings'] += $extra_editor_settings;
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function quanthub_core_ckeditor_css_alter(array &$css) {
  $css[] = \Drupal::service('extension.list.module')->getPath('quanthub_core') . '/css/ckeditor-styles.css';
}

/**
 * Implements hook_language_switch_links_alter().
 *
 * A temporary workaround to shrink the menu.
 */
//function quanthub_core_language_switch_links_alter(array &$links, $type, Url $url) {
//  foreach ($links as $langcode => &$link) {
//    switch ($langcode) {
//      case 'en':
//        $link['title'] = 'Eng';
//        break;
//
//      case 'uk':
//        $link['title'] = t('Ukr', [], ['langcode' => 'uk']);
//    }
//  }
//}
