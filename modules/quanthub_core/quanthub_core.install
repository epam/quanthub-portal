<?php

/**
 * @file
 * Install, update and uninstall functions for the Quanthub Core module.
 */

use Drupal\Core\File\Exception\FileException;
use Drupal\Core\File\FileSystemInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Change field type for field_powerbi_report.
 */
function quanthub_core_update_8001() {
  $database = \Drupal::database();
  $entityType = 'node';
  $fieldName = 'field_powerbi_report';
  $table = $entityType . '__' . $fieldName;
  $currentRows = NULL;
  $newFieldsList = [];
  $fieldStorage = FieldStorageConfig::loadByName($entityType, $fieldName);

  if (is_null($fieldStorage)) {
    return;
  }

  // Get all current data from DB.
  if ($database->schema()->tableExists($table)) {
    // The table data to restore after the update is completed.
    $currentRows = $database->select($table, 'n')
      ->fields('n')
      ->execute()
      ->fetchAll();
  }

  // Use existing field config for new field.
  foreach ($fieldStorage->getBundles() as $bundle => $label) {
    $field = FieldConfig::loadByName($entityType, $bundle, $fieldName);
    $newField = $field->toArray();
    $newField['field_type'] = 'quanthub_powerbi_embed';
    $newField['settings'] = [];
    $newFieldsList[] = $newField;
  }

  // Deleting field storage which will also delete bundles(fields).
  $newFieldStorage = $fieldStorage->toArray();
  $newFieldStorage['type'] = 'quanthub_powerbi_embed';
  $newFieldStorage['settings'] = [];

  $fieldStorage->delete();

  // Purge field data now to allow new field and field_storage with same name
  // to be created.
  field_purge_batch(40);

  // Create new field storage.
  $newFieldStorage = FieldStorageConfig::create($newFieldStorage);
  $newFieldStorage->save();

  // Create new fields.
  foreach ($newFieldsList as $nfield) {
    $nfieldConfig = FieldConfig::create($nfield);
    $nfieldConfig->save();
  }

  // Restore existing data in new table.
  if (!is_null($currentRows)) {
    foreach ($currentRows as $row) {
      $database->insert($table)
        ->fields((array) $row)
        ->execute();
    }
  }
}

/**
 * Change field type for field_powerbi_report_2.
 */
function quanthub_core_update_8002() {
  $database = \Drupal::database();
  $entityType = 'node';
  $fieldName = 'field_powerbi_report_2';
  $table = $entityType . '__' . $fieldName;
  $currentRows = NULL;
  $newFieldsList = [];
  $fieldStorage = FieldStorageConfig::loadByName($entityType, $fieldName);

  if (is_null($fieldStorage)) {
    return;
  }

  // Get all current data from DB.
  if ($database->schema()->tableExists($table)) {
    // The table data to restore after the update is completed.
    $currentRows = $database->select($table, 'n')
      ->fields('n')
      ->execute()
      ->fetchAll();
  }

  // Use existing field config for new field.
  foreach ($fieldStorage->getBundles() as $bundle => $label) {
    $field = FieldConfig::loadByName($entityType, $bundle, $fieldName);
    $newField = $field->toArray();
    $newField['field_type'] = 'quanthub_powerbi_embed';
    $newField['settings'] = [];
    $newFieldsList[] = $newField;
  }

  // Deleting field storage which will also delete bundles(fields).
  $newFieldStorage = $fieldStorage->toArray();
  $newFieldStorage['type'] = 'quanthub_powerbi_embed';
  $newFieldStorage['settings'] = [];

  $fieldStorage->delete();

  // Purge field data now to allow new field and field_storage with same name
  // to be created.
  field_purge_batch(40);

  // Create new field storage.
  $newFieldStorage = FieldStorageConfig::create($newFieldStorage);
  $newFieldStorage->save();

  // Create new fields.
  foreach ($newFieldsList as $nfield) {
    $nfieldConfig = FieldConfig::create($nfield);
    $nfieldConfig->save();
  }

  // Restore existing data in new table.
  if (!is_null($currentRows)) {
    foreach ($currentRows as $row) {
      $database->insert($table)
        ->fields((array) $row)
        ->execute();
    }
  }
}

/**
 * Change field type for field_powerbi_report_3.
 */
function quanthub_core_update_8003() {
  $database = \Drupal::database();
  $entityType = 'node';
  $fieldName = 'field_powerbi_report_3';
  $table = $entityType . '__' . $fieldName;
  $currentRows = NULL;
  $newFieldsList = [];
  $fieldStorage = FieldStorageConfig::loadByName($entityType, $fieldName);

  if (is_null($fieldStorage)) {
    return;
  }

  // Get all current data from DB.
  if ($database->schema()->tableExists($table)) {
    // The table data to restore after the update is completed.
    $currentRows = $database->select($table, 'n')
      ->fields('n')
      ->execute()
      ->fetchAll();
  }

  // Use existing field config for new field.
  foreach ($fieldStorage->getBundles() as $bundle => $label) {
    $field = FieldConfig::loadByName($entityType, $bundle, $fieldName);
    $newField = $field->toArray();
    $newField['field_type'] = 'quanthub_powerbi_embed';
    $newField['settings'] = [];
    $newFieldsList[] = $newField;
  }

  // Deleting field storage which will also delete bundles(fields).
  $newFieldStorage = $fieldStorage->toArray();
  $newFieldStorage['type'] = 'quanthub_powerbi_embed';
  $newFieldStorage['settings'] = [];

  $fieldStorage->delete();

  // Purge field data now to allow new field and field_storage with same name
  // to be created.
  field_purge_batch(40);

  // Create new field storage.
  $newFieldStorage = FieldStorageConfig::create($newFieldStorage);
  $newFieldStorage->save();

  // Create new fields.
  foreach ($newFieldsList as $nfield) {
    $nfieldConfig = FieldConfig::create($nfield);
    $nfieldConfig->save();
  }

  // Restore existing data in new table.
  if (!is_null($currentRows)) {
    foreach ($currentRows as $row) {
      $database->insert($table)
        ->fields((array) $row)
        ->execute();
    }
  }
}

/**
 * Upload Power BI media icon to public directory.
 */
function quanthub_core_update_8004() {
  $source = \Drupal::service('extension.list.module')->getPath('quanthub_core') . '/images/icons';
  $destination = \Drupal::config('media.settings')->get('icon_base_uri');
  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
  $file_system = \Drupal::service('file_system');

  $files = $file_system->scanDirectory($source, '/.*\.(svg|png|jpg|jpeg|gif)$/');
  foreach ($files as $file) {
    if (!file_exists($destination . DIRECTORY_SEPARATOR . $file->filename)) {
      try {
        $file_system->copy($file->uri, $destination, FileSystemInterface::EXISTS_ERROR);
      }
      catch (FileException $e) {
        // Ignore and continue.
      }
    }
  }
}

/**
 * Move all terms from old vocabularies to the new 'Topics'.
 */
function quanthub_core_update_8005() {
  $old_vocabularies = [
    'economy_and_finance',
    'education',
    'environment',
    'global_markets',
    'government_finance'
  ];
  $topics_vocabulary_id = 'topics';

  // Check if 'Topics' vocabulary already exists.
  if ($new_vocabulary = \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->load($topics_vocabulary_id)) {
    drupal_set_message(t('Vocabulary @vid already exists.', ['@vid' => $topics_vocabulary_id]), 'warning');
  }
  else {
    // Create a new vocabulary 'Topics'.
    $new_vocabulary = \Drupal\taxonomy\Entity\Vocabulary::create([
      'vid' => $topics_vocabulary_id,
      'name' => 'Topics',
    ]);
    $new_vocabulary->save();
  }

  // Move all terms to the new vocabulary.
  foreach ($old_vocabularies as $vocabulary) {
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vocabulary);

    foreach ($terms as $term) {
      $term_entity = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term->tid);
      $term_entity->set('vid', $topics_vocabulary_id);
      $term_entity->save();
    }

    // Deleting vocabularies.
    if ($vocabulary_to_delete = \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->load($vocabulary)) {
      $vocabulary_to_delete->delete();
    }
  }

  return t('Moved all terms from old vocabularies to Topics. Old vocabularies have been deleted.');
}
